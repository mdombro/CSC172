Author: Matthew Dombroski
Project 3

In this project a program to solve the point location problem in logN time was implemented. Utilizing a version of the binary search tree class writeen for lab and various functions using simple trigonometry a binary tree was constructed from the line segments representing the input line points. For every pair of points describing a line the intersections between the new line and all other existing lines are found. Line segments are then created from these intersection and line enpoints. The segments are inserted into the binary tree with the help of the ccw() function presented in the lab writeup. The midpoint of each line segment determines which side of a particular node a line segments is on and thus which side of that node the line segment is stored. This process is recursively called until a null child is found and the line segment is stored into that location. 

To find if two point are in the same region a similar process to line segment insertion is used. Both points and the current nodes enpoints are fed into the ccw function. If both point are on the same side of the node, the point are recursively passed to that side. If at any point the side for the point are different, this indicates that the points are in different regions and the current nodes endpoints are passed up to be printed onscreen as the seperating line. If the sides are the same unitl the recursive function encounters a null child, then the points must be in the same region and that fact is returned to be printed onscreen.

The number of leaves and average path length grow in roughly in logN. The more lines a new line intersects the more nodes it will create because that new line will lie on both sides of several exisitng lines. Similarly this will generate more leaves. However these growths depend a fair amount on the line intersections. For example if there are many parallel lines all clockwise to each previous line then the tree grow only in one direction and increase in depth by one with each line. 
